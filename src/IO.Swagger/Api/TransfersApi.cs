/* 
 * GloRemit - REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransfersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/transfers/{GTN}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">14-character GTN number from GloRemit. This field can be NULL if TransID value is submitted.</param>
        /// <returns>GetTrxStatusModel</returns>
        GetTrxStatusModel V1PaymentsTransfersByGTNGet (string GTN);

        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/transfers/{GTN}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">14-character GTN number from GloRemit. This field can be NULL if TransID value is submitted.</param>
        /// <returns>ApiResponse of GetTrxStatusModel</returns>
        ApiResponse<GetTrxStatusModel> V1PaymentsTransfersByGTNGetWithHttpInfo (string GTN);
        /// <summary>
        /// Use this method for cancel the transaction when certain criteria is met.
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST v1/payments/transfers/{GTN}/requests/{RSP_RequestID}/do-cancellation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">Transaction GTN number (14 characters)</param>
        /// <param name="rSPRequestID">Unique transaction ID used by RSP in Cancellation method.</param>
        /// <returns>DoCancellationModelDeleted</returns>
        DoCancellationModelDeleted V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPost (string GTN, string rSPRequestID);

        /// <summary>
        /// Use this method for cancel the transaction when certain criteria is met.
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST v1/payments/transfers/{GTN}/requests/{RSP_RequestID}/do-cancellation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">Transaction GTN number (14 characters)</param>
        /// <param name="rSPRequestID">Unique transaction ID used by RSP in Cancellation method.</param>
        /// <returns>ApiResponse of DoCancellationModelDeleted</returns>
        ApiResponse<DoCancellationModelDeleted> V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPostWithHttpInfo (string GTN, string rSPRequestID);
        /// <summary>
        /// To inquire the status of the cancellation request.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET v1/payments/transfers/do-cancellation/{CancellationID}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationID">14-character cancellation ID</param>
        /// <returns>GetCancellationStatusModelResponse</returns>
        GetCancellationStatusModelResponse V1PaymentsTransfersDoCancellationByCancellationIDGet (string cancellationID);

        /// <summary>
        /// To inquire the status of the cancellation request.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET v1/payments/transfers/do-cancellation/{CancellationID}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationID">14-character cancellation ID</param>
        /// <returns>ApiResponse of GetCancellationStatusModelResponse</returns>
        ApiResponse<GetCancellationStatusModelResponse> V1PaymentsTransfersDoCancellationByCancellationIDGetWithHttpInfo (string cancellationID);
        /// <summary>
        /// Initiate and confirm the fund transfer operation via GloRemit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doTransferModel">Request data required to initiate fund transfer. (optional)</param>
        /// <returns></returns>
        void V1PaymentsTransfersPost (DoTransferModel doTransferModel = null);

        /// <summary>
        /// Initiate and confirm the fund transfer operation via GloRemit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doTransferModel">Request data required to initiate fund transfer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1PaymentsTransfersPostWithHttpInfo (DoTransferModel doTransferModel = null);
        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/transfers/requests/{transID}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">Unique transaction ID used by RSP in Do_Transfer method. This field can be NULL if GTN value is submitted.</param>
        /// <returns>GetTrxStatusModel</returns>
        GetTrxStatusModel V1PaymentsTransfersRequestsByTransIDGet (string transID);

        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/transfers/requests/{transID}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">Unique transaction ID used by RSP in Do_Transfer method. This field can be NULL if GTN value is submitted.</param>
        /// <returns>ApiResponse of GetTrxStatusModel</returns>
        ApiResponse<GetTrxStatusModel> V1PaymentsTransfersRequestsByTransIDGetWithHttpInfo (string transID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/transfers/{GTN}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">14-character GTN number from GloRemit. This field can be NULL if TransID value is submitted.</param>
        /// <returns>Task of GetTrxStatusModel</returns>
        System.Threading.Tasks.Task<GetTrxStatusModel> V1PaymentsTransfersByGTNGetAsync (string GTN);

        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/transfers/{GTN}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">14-character GTN number from GloRemit. This field can be NULL if TransID value is submitted.</param>
        /// <returns>Task of ApiResponse (GetTrxStatusModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTrxStatusModel>> V1PaymentsTransfersByGTNGetAsyncWithHttpInfo (string GTN);
        /// <summary>
        /// Use this method for cancel the transaction when certain criteria is met.
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST v1/payments/transfers/{GTN}/requests/{RSP_RequestID}/do-cancellation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">Transaction GTN number (14 characters)</param>
        /// <param name="rSPRequestID">Unique transaction ID used by RSP in Cancellation method.</param>
        /// <returns>Task of DoCancellationModelDeleted</returns>
        System.Threading.Tasks.Task<DoCancellationModelDeleted> V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPostAsync (string GTN, string rSPRequestID);

        /// <summary>
        /// Use this method for cancel the transaction when certain criteria is met.
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST v1/payments/transfers/{GTN}/requests/{RSP_RequestID}/do-cancellation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">Transaction GTN number (14 characters)</param>
        /// <param name="rSPRequestID">Unique transaction ID used by RSP in Cancellation method.</param>
        /// <returns>Task of ApiResponse (DoCancellationModelDeleted)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoCancellationModelDeleted>> V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPostAsyncWithHttpInfo (string GTN, string rSPRequestID);
        /// <summary>
        /// To inquire the status of the cancellation request.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET v1/payments/transfers/do-cancellation/{CancellationID}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationID">14-character cancellation ID</param>
        /// <returns>Task of GetCancellationStatusModelResponse</returns>
        System.Threading.Tasks.Task<GetCancellationStatusModelResponse> V1PaymentsTransfersDoCancellationByCancellationIDGetAsync (string cancellationID);

        /// <summary>
        /// To inquire the status of the cancellation request.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET v1/payments/transfers/do-cancellation/{CancellationID}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationID">14-character cancellation ID</param>
        /// <returns>Task of ApiResponse (GetCancellationStatusModelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCancellationStatusModelResponse>> V1PaymentsTransfersDoCancellationByCancellationIDGetAsyncWithHttpInfo (string cancellationID);
        /// <summary>
        /// Initiate and confirm the fund transfer operation via GloRemit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doTransferModel">Request data required to initiate fund transfer. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1PaymentsTransfersPostAsync (DoTransferModel doTransferModel = null);

        /// <summary>
        /// Initiate and confirm the fund transfer operation via GloRemit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doTransferModel">Request data required to initiate fund transfer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1PaymentsTransfersPostAsyncWithHttpInfo (DoTransferModel doTransferModel = null);
        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/transfers/requests/{transID}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">Unique transaction ID used by RSP in Do_Transfer method. This field can be NULL if GTN value is submitted.</param>
        /// <returns>Task of GetTrxStatusModel</returns>
        System.Threading.Tasks.Task<GetTrxStatusModel> V1PaymentsTransfersRequestsByTransIDGetAsync (string transID);

        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/transfers/requests/{transID}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">Unique transaction ID used by RSP in Do_Transfer method. This field can be NULL if GTN value is submitted.</param>
        /// <returns>Task of ApiResponse (GetTrxStatusModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTrxStatusModel>> V1PaymentsTransfersRequestsByTransIDGetAsyncWithHttpInfo (string transID);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransfersApi : ITransfersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransfersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransfersApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransfersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransfersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST Sample request:                    GET /v1/payments/transfers/{GTN}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">14-character GTN number from GloRemit. This field can be NULL if TransID value is submitted.</param>
        /// <returns>GetTrxStatusModel</returns>
        public GetTrxStatusModel V1PaymentsTransfersByGTNGet (string GTN)
        {
             ApiResponse<GetTrxStatusModel> localVarResponse = V1PaymentsTransfersByGTNGetWithHttpInfo(GTN);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST Sample request:                    GET /v1/payments/transfers/{GTN}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">14-character GTN number from GloRemit. This field can be NULL if TransID value is submitted.</param>
        /// <returns>ApiResponse of GetTrxStatusModel</returns>
        public ApiResponse< GetTrxStatusModel > V1PaymentsTransfersByGTNGetWithHttpInfo (string GTN)
        {
            // verify the required parameter 'GTN' is set
            if (GTN == null)
                throw new ApiException(400, "Missing required parameter 'GTN' when calling TransfersApi->V1PaymentsTransfersByGTNGet");

            var localVarPath = "/v1/payments/transfers/{GTN}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (GTN != null) localVarPathParams.Add("GTN", Configuration.ApiClient.ParameterToString(GTN)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsTransfersByGTNGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTrxStatusModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTrxStatusModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTrxStatusModel)));
        }

        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST Sample request:                    GET /v1/payments/transfers/{GTN}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">14-character GTN number from GloRemit. This field can be NULL if TransID value is submitted.</param>
        /// <returns>Task of GetTrxStatusModel</returns>
        public async System.Threading.Tasks.Task<GetTrxStatusModel> V1PaymentsTransfersByGTNGetAsync (string GTN)
        {
             ApiResponse<GetTrxStatusModel> localVarResponse = await V1PaymentsTransfersByGTNGetAsyncWithHttpInfo(GTN);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST Sample request:                    GET /v1/payments/transfers/{GTN}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">14-character GTN number from GloRemit. This field can be NULL if TransID value is submitted.</param>
        /// <returns>Task of ApiResponse (GetTrxStatusModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTrxStatusModel>> V1PaymentsTransfersByGTNGetAsyncWithHttpInfo (string GTN)
        {
            // verify the required parameter 'GTN' is set
            if (GTN == null)
                throw new ApiException(400, "Missing required parameter 'GTN' when calling TransfersApi->V1PaymentsTransfersByGTNGet");

            var localVarPath = "/v1/payments/transfers/{GTN}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (GTN != null) localVarPathParams.Add("GTN", Configuration.ApiClient.ParameterToString(GTN)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsTransfersByGTNGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTrxStatusModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTrxStatusModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTrxStatusModel)));
        }

        /// <summary>
        /// Use this method for cancel the transaction when certain criteria is met. Sample request:                    POST v1/payments/transfers/{GTN}/requests/{RSP_RequestID}/do-cancellation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">Transaction GTN number (14 characters)</param>
        /// <param name="rSPRequestID">Unique transaction ID used by RSP in Cancellation method.</param>
        /// <returns>DoCancellationModelDeleted</returns>
        public DoCancellationModelDeleted V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPost (string GTN, string rSPRequestID)
        {
             ApiResponse<DoCancellationModelDeleted> localVarResponse = V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPostWithHttpInfo(GTN, rSPRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this method for cancel the transaction when certain criteria is met. Sample request:                    POST v1/payments/transfers/{GTN}/requests/{RSP_RequestID}/do-cancellation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">Transaction GTN number (14 characters)</param>
        /// <param name="rSPRequestID">Unique transaction ID used by RSP in Cancellation method.</param>
        /// <returns>ApiResponse of DoCancellationModelDeleted</returns>
        public ApiResponse< DoCancellationModelDeleted > V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPostWithHttpInfo (string GTN, string rSPRequestID)
        {
            // verify the required parameter 'GTN' is set
            if (GTN == null)
                throw new ApiException(400, "Missing required parameter 'GTN' when calling TransfersApi->V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPost");
            // verify the required parameter 'rSPRequestID' is set
            if (rSPRequestID == null)
                throw new ApiException(400, "Missing required parameter 'rSPRequestID' when calling TransfersApi->V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPost");

            var localVarPath = "/v1/payments/transfers/{GTN}/requests/{RSP_RequestID}/do-cancellation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (GTN != null) localVarPathParams.Add("GTN", Configuration.ApiClient.ParameterToString(GTN)); // path parameter
            if (rSPRequestID != null) localVarPathParams.Add("RSP_RequestID", Configuration.ApiClient.ParameterToString(rSPRequestID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoCancellationModelDeleted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoCancellationModelDeleted) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoCancellationModelDeleted)));
        }

        /// <summary>
        /// Use this method for cancel the transaction when certain criteria is met. Sample request:                    POST v1/payments/transfers/{GTN}/requests/{RSP_RequestID}/do-cancellation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">Transaction GTN number (14 characters)</param>
        /// <param name="rSPRequestID">Unique transaction ID used by RSP in Cancellation method.</param>
        /// <returns>Task of DoCancellationModelDeleted</returns>
        public async System.Threading.Tasks.Task<DoCancellationModelDeleted> V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPostAsync (string GTN, string rSPRequestID)
        {
             ApiResponse<DoCancellationModelDeleted> localVarResponse = await V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPostAsyncWithHttpInfo(GTN, rSPRequestID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this method for cancel the transaction when certain criteria is met. Sample request:                    POST v1/payments/transfers/{GTN}/requests/{RSP_RequestID}/do-cancellation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="GTN">Transaction GTN number (14 characters)</param>
        /// <param name="rSPRequestID">Unique transaction ID used by RSP in Cancellation method.</param>
        /// <returns>Task of ApiResponse (DoCancellationModelDeleted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoCancellationModelDeleted>> V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPostAsyncWithHttpInfo (string GTN, string rSPRequestID)
        {
            // verify the required parameter 'GTN' is set
            if (GTN == null)
                throw new ApiException(400, "Missing required parameter 'GTN' when calling TransfersApi->V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPost");
            // verify the required parameter 'rSPRequestID' is set
            if (rSPRequestID == null)
                throw new ApiException(400, "Missing required parameter 'rSPRequestID' when calling TransfersApi->V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPost");

            var localVarPath = "/v1/payments/transfers/{GTN}/requests/{RSP_RequestID}/do-cancellation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (GTN != null) localVarPathParams.Add("GTN", Configuration.ApiClient.ParameterToString(GTN)); // path parameter
            if (rSPRequestID != null) localVarPathParams.Add("RSP_RequestID", Configuration.ApiClient.ParameterToString(rSPRequestID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsTransfersByGTNRequestsByRSPRequestIDDoCancellationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoCancellationModelDeleted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoCancellationModelDeleted) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoCancellationModelDeleted)));
        }

        /// <summary>
        /// To inquire the status of the cancellation request. Sample request:                    GET v1/payments/transfers/do-cancellation/{CancellationID}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationID">14-character cancellation ID</param>
        /// <returns>GetCancellationStatusModelResponse</returns>
        public GetCancellationStatusModelResponse V1PaymentsTransfersDoCancellationByCancellationIDGet (string cancellationID)
        {
             ApiResponse<GetCancellationStatusModelResponse> localVarResponse = V1PaymentsTransfersDoCancellationByCancellationIDGetWithHttpInfo(cancellationID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// To inquire the status of the cancellation request. Sample request:                    GET v1/payments/transfers/do-cancellation/{CancellationID}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationID">14-character cancellation ID</param>
        /// <returns>ApiResponse of GetCancellationStatusModelResponse</returns>
        public ApiResponse< GetCancellationStatusModelResponse > V1PaymentsTransfersDoCancellationByCancellationIDGetWithHttpInfo (string cancellationID)
        {
            // verify the required parameter 'cancellationID' is set
            if (cancellationID == null)
                throw new ApiException(400, "Missing required parameter 'cancellationID' when calling TransfersApi->V1PaymentsTransfersDoCancellationByCancellationIDGet");

            var localVarPath = "/v1/payments/transfers/do-cancellation/{CancellationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cancellationID != null) localVarPathParams.Add("CancellationID", Configuration.ApiClient.ParameterToString(cancellationID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsTransfersDoCancellationByCancellationIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCancellationStatusModelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCancellationStatusModelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCancellationStatusModelResponse)));
        }

        /// <summary>
        /// To inquire the status of the cancellation request. Sample request:                    GET v1/payments/transfers/do-cancellation/{CancellationID}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationID">14-character cancellation ID</param>
        /// <returns>Task of GetCancellationStatusModelResponse</returns>
        public async System.Threading.Tasks.Task<GetCancellationStatusModelResponse> V1PaymentsTransfersDoCancellationByCancellationIDGetAsync (string cancellationID)
        {
             ApiResponse<GetCancellationStatusModelResponse> localVarResponse = await V1PaymentsTransfersDoCancellationByCancellationIDGetAsyncWithHttpInfo(cancellationID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// To inquire the status of the cancellation request. Sample request:                    GET v1/payments/transfers/do-cancellation/{CancellationID}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationID">14-character cancellation ID</param>
        /// <returns>Task of ApiResponse (GetCancellationStatusModelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCancellationStatusModelResponse>> V1PaymentsTransfersDoCancellationByCancellationIDGetAsyncWithHttpInfo (string cancellationID)
        {
            // verify the required parameter 'cancellationID' is set
            if (cancellationID == null)
                throw new ApiException(400, "Missing required parameter 'cancellationID' when calling TransfersApi->V1PaymentsTransfersDoCancellationByCancellationIDGet");

            var localVarPath = "/v1/payments/transfers/do-cancellation/{CancellationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cancellationID != null) localVarPathParams.Add("CancellationID", Configuration.ApiClient.ParameterToString(cancellationID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsTransfersDoCancellationByCancellationIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCancellationStatusModelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCancellationStatusModelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCancellationStatusModelResponse)));
        }

        /// <summary>
        /// Initiate and confirm the fund transfer operation via GloRemit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doTransferModel">Request data required to initiate fund transfer. (optional)</param>
        /// <returns></returns>
        public void V1PaymentsTransfersPost (DoTransferModel doTransferModel = null)
        {
             V1PaymentsTransfersPostWithHttpInfo(doTransferModel);
        }

        /// <summary>
        /// Initiate and confirm the fund transfer operation via GloRemit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doTransferModel">Request data required to initiate fund transfer. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1PaymentsTransfersPostWithHttpInfo (DoTransferModel doTransferModel = null)
        {

            var localVarPath = "/v1/payments/transfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doTransferModel != null && doTransferModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(doTransferModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doTransferModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Initiate and confirm the fund transfer operation via GloRemit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doTransferModel">Request data required to initiate fund transfer. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1PaymentsTransfersPostAsync (DoTransferModel doTransferModel = null)
        {
             await V1PaymentsTransfersPostAsyncWithHttpInfo(doTransferModel);

        }

        /// <summary>
        /// Initiate and confirm the fund transfer operation via GloRemit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doTransferModel">Request data required to initiate fund transfer. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1PaymentsTransfersPostAsyncWithHttpInfo (DoTransferModel doTransferModel = null)
        {

            var localVarPath = "/v1/payments/transfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doTransferModel != null && doTransferModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(doTransferModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doTransferModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST Sample request:                    GET /v1/payments/transfers/requests/{transID}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">Unique transaction ID used by RSP in Do_Transfer method. This field can be NULL if GTN value is submitted.</param>
        /// <returns>GetTrxStatusModel</returns>
        public GetTrxStatusModel V1PaymentsTransfersRequestsByTransIDGet (string transID)
        {
             ApiResponse<GetTrxStatusModel> localVarResponse = V1PaymentsTransfersRequestsByTransIDGetWithHttpInfo(transID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST Sample request:                    GET /v1/payments/transfers/requests/{transID}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">Unique transaction ID used by RSP in Do_Transfer method. This field can be NULL if GTN value is submitted.</param>
        /// <returns>ApiResponse of GetTrxStatusModel</returns>
        public ApiResponse< GetTrxStatusModel > V1PaymentsTransfersRequestsByTransIDGetWithHttpInfo (string transID)
        {
            // verify the required parameter 'transID' is set
            if (transID == null)
                throw new ApiException(400, "Missing required parameter 'transID' when calling TransfersApi->V1PaymentsTransfersRequestsByTransIDGet");

            var localVarPath = "/v1/payments/transfers/requests/{transID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transID != null) localVarPathParams.Add("transID", Configuration.ApiClient.ParameterToString(transID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsTransfersRequestsByTransIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTrxStatusModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTrxStatusModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTrxStatusModel)));
        }

        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST Sample request:                    GET /v1/payments/transfers/requests/{transID}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">Unique transaction ID used by RSP in Do_Transfer method. This field can be NULL if GTN value is submitted.</param>
        /// <returns>Task of GetTrxStatusModel</returns>
        public async System.Threading.Tasks.Task<GetTrxStatusModel> V1PaymentsTransfersRequestsByTransIDGetAsync (string transID)
        {
             ApiResponse<GetTrxStatusModel> localVarResponse = await V1PaymentsTransfersRequestsByTransIDGetAsyncWithHttpInfo(transID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check and confirm the transaction status if such status is not conclusive in Transfer POST Sample request:                    GET /v1/payments/transfers/requests/{transID}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">Unique transaction ID used by RSP in Do_Transfer method. This field can be NULL if GTN value is submitted.</param>
        /// <returns>Task of ApiResponse (GetTrxStatusModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTrxStatusModel>> V1PaymentsTransfersRequestsByTransIDGetAsyncWithHttpInfo (string transID)
        {
            // verify the required parameter 'transID' is set
            if (transID == null)
                throw new ApiException(400, "Missing required parameter 'transID' when calling TransfersApi->V1PaymentsTransfersRequestsByTransIDGet");

            var localVarPath = "/v1/payments/transfers/requests/{transID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transID != null) localVarPathParams.Add("transID", Configuration.ApiClient.ParameterToString(transID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsTransfersRequestsByTransIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTrxStatusModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTrxStatusModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTrxStatusModel)));
        }

    }
}
