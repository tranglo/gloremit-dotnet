/* 
 * GloRemit - REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBillsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Initiate and confirm the bill payment operation via GloRemit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doBillPaymentModel">Request data required to initiate bill payment. (optional)</param>
        /// <returns></returns>
        void V1PaymentsBillsPost (DoBillPaymentModelCreated doBillPaymentModel = null);

        /// <summary>
        /// Initiate and confirm the bill payment operation via GloRemit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doBillPaymentModel">Request data required to initiate bill payment. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1PaymentsBillsPostWithHttpInfo (DoBillPaymentModelCreated doBillPaymentModel = null);
        /// <summary>
        /// Retrieve information of a bill account.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/bills?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bCountry&#x3D;{bCountry}&amp;amp;bCurrency&#x3D;{bCurrency}&amp;amp;              bAmount&#x3D;{bAmount}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP</param>
        /// <param name="sIdType">Sender Identification Type (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name (optional)</param>
        /// <param name="sLastName">Sender’s last name (optional)</param>
        /// <param name="bCountry">Bill country code (optional)</param>
        /// <param name="bCurrency">Bill Currency Code (optional)</param>
        /// <param name="bAmount">Total amount to pay for the bill (optional)</param>
        /// <param name="bIssuerCode">Biller Issuer Code (optional)</param>
        /// <param name="bAccNum">Bill Account Number or any other unique account identifier as determined by biller (optional)</param>
        /// <returns>DoBillInquiryModelResponse</returns>
        DoBillInquiryModelResponse V1PaymentsBillsRequestsByTransIDGet (string transID, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bCountry = null, string bCurrency = null, double? bAmount = null, string bIssuerCode = null, string bAccNum = null);

        /// <summary>
        /// Retrieve information of a bill account.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/bills?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bCountry&#x3D;{bCountry}&amp;amp;bCurrency&#x3D;{bCurrency}&amp;amp;              bAmount&#x3D;{bAmount}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP</param>
        /// <param name="sIdType">Sender Identification Type (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name (optional)</param>
        /// <param name="sLastName">Sender’s last name (optional)</param>
        /// <param name="bCountry">Bill country code (optional)</param>
        /// <param name="bCurrency">Bill Currency Code (optional)</param>
        /// <param name="bAmount">Total amount to pay for the bill (optional)</param>
        /// <param name="bIssuerCode">Biller Issuer Code (optional)</param>
        /// <param name="bAccNum">Bill Account Number or any other unique account identifier as determined by biller (optional)</param>
        /// <returns>ApiResponse of DoBillInquiryModelResponse</returns>
        ApiResponse<DoBillInquiryModelResponse> V1PaymentsBillsRequestsByTransIDGetWithHttpInfo (string transID, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bCountry = null, string bCurrency = null, double? bAmount = null, string bIssuerCode = null, string bAccNum = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Initiate and confirm the bill payment operation via GloRemit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doBillPaymentModel">Request data required to initiate bill payment. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1PaymentsBillsPostAsync (DoBillPaymentModelCreated doBillPaymentModel = null);

        /// <summary>
        /// Initiate and confirm the bill payment operation via GloRemit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doBillPaymentModel">Request data required to initiate bill payment. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1PaymentsBillsPostAsyncWithHttpInfo (DoBillPaymentModelCreated doBillPaymentModel = null);
        /// <summary>
        /// Retrieve information of a bill account.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/bills?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bCountry&#x3D;{bCountry}&amp;amp;bCurrency&#x3D;{bCurrency}&amp;amp;              bAmount&#x3D;{bAmount}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP</param>
        /// <param name="sIdType">Sender Identification Type (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name (optional)</param>
        /// <param name="sLastName">Sender’s last name (optional)</param>
        /// <param name="bCountry">Bill country code (optional)</param>
        /// <param name="bCurrency">Bill Currency Code (optional)</param>
        /// <param name="bAmount">Total amount to pay for the bill (optional)</param>
        /// <param name="bIssuerCode">Biller Issuer Code (optional)</param>
        /// <param name="bAccNum">Bill Account Number or any other unique account identifier as determined by biller (optional)</param>
        /// <returns>Task of DoBillInquiryModelResponse</returns>
        System.Threading.Tasks.Task<DoBillInquiryModelResponse> V1PaymentsBillsRequestsByTransIDGetAsync (string transID, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bCountry = null, string bCurrency = null, double? bAmount = null, string bIssuerCode = null, string bAccNum = null);

        /// <summary>
        /// Retrieve information of a bill account.
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/bills?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bCountry&#x3D;{bCountry}&amp;amp;bCurrency&#x3D;{bCurrency}&amp;amp;              bAmount&#x3D;{bAmount}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP</param>
        /// <param name="sIdType">Sender Identification Type (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name (optional)</param>
        /// <param name="sLastName">Sender’s last name (optional)</param>
        /// <param name="bCountry">Bill country code (optional)</param>
        /// <param name="bCurrency">Bill Currency Code (optional)</param>
        /// <param name="bAmount">Total amount to pay for the bill (optional)</param>
        /// <param name="bIssuerCode">Biller Issuer Code (optional)</param>
        /// <param name="bAccNum">Bill Account Number or any other unique account identifier as determined by biller (optional)</param>
        /// <returns>Task of ApiResponse (DoBillInquiryModelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoBillInquiryModelResponse>> V1PaymentsBillsRequestsByTransIDGetAsyncWithHttpInfo (string transID, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bCountry = null, string bCurrency = null, double? bAmount = null, string bIssuerCode = null, string bAccNum = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BillsApi : IBillsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BillsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BillsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BillsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Initiate and confirm the bill payment operation via GloRemit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doBillPaymentModel">Request data required to initiate bill payment. (optional)</param>
        /// <returns></returns>
        public void V1PaymentsBillsPost (DoBillPaymentModelCreated doBillPaymentModel = null)
        {
             V1PaymentsBillsPostWithHttpInfo(doBillPaymentModel);
        }

        /// <summary>
        /// Initiate and confirm the bill payment operation via GloRemit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doBillPaymentModel">Request data required to initiate bill payment. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1PaymentsBillsPostWithHttpInfo (DoBillPaymentModelCreated doBillPaymentModel = null)
        {

            var localVarPath = "/v1/payments/bills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doBillPaymentModel != null && doBillPaymentModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(doBillPaymentModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doBillPaymentModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsBillsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Initiate and confirm the bill payment operation via GloRemit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doBillPaymentModel">Request data required to initiate bill payment. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1PaymentsBillsPostAsync (DoBillPaymentModelCreated doBillPaymentModel = null)
        {
             await V1PaymentsBillsPostAsyncWithHttpInfo(doBillPaymentModel);

        }

        /// <summary>
        /// Initiate and confirm the bill payment operation via GloRemit 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doBillPaymentModel">Request data required to initiate bill payment. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1PaymentsBillsPostAsyncWithHttpInfo (DoBillPaymentModelCreated doBillPaymentModel = null)
        {

            var localVarPath = "/v1/payments/bills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doBillPaymentModel != null && doBillPaymentModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(doBillPaymentModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doBillPaymentModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsBillsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve information of a bill account. Sample request:                    GET /v1/payments/bills?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bCountry&#x3D;{bCountry}&amp;amp;bCurrency&#x3D;{bCurrency}&amp;amp;              bAmount&#x3D;{bAmount}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP</param>
        /// <param name="sIdType">Sender Identification Type (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name (optional)</param>
        /// <param name="sLastName">Sender’s last name (optional)</param>
        /// <param name="bCountry">Bill country code (optional)</param>
        /// <param name="bCurrency">Bill Currency Code (optional)</param>
        /// <param name="bAmount">Total amount to pay for the bill (optional)</param>
        /// <param name="bIssuerCode">Biller Issuer Code (optional)</param>
        /// <param name="bAccNum">Bill Account Number or any other unique account identifier as determined by biller (optional)</param>
        /// <returns>DoBillInquiryModelResponse</returns>
        public DoBillInquiryModelResponse V1PaymentsBillsRequestsByTransIDGet (string transID, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bCountry = null, string bCurrency = null, double? bAmount = null, string bIssuerCode = null, string bAccNum = null)
        {
             ApiResponse<DoBillInquiryModelResponse> localVarResponse = V1PaymentsBillsRequestsByTransIDGetWithHttpInfo(transID, sIdType, sIdNum, sFirstName, sLastName, bCountry, bCurrency, bAmount, bIssuerCode, bAccNum);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information of a bill account. Sample request:                    GET /v1/payments/bills?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bCountry&#x3D;{bCountry}&amp;amp;bCurrency&#x3D;{bCurrency}&amp;amp;              bAmount&#x3D;{bAmount}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP</param>
        /// <param name="sIdType">Sender Identification Type (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name (optional)</param>
        /// <param name="sLastName">Sender’s last name (optional)</param>
        /// <param name="bCountry">Bill country code (optional)</param>
        /// <param name="bCurrency">Bill Currency Code (optional)</param>
        /// <param name="bAmount">Total amount to pay for the bill (optional)</param>
        /// <param name="bIssuerCode">Biller Issuer Code (optional)</param>
        /// <param name="bAccNum">Bill Account Number or any other unique account identifier as determined by biller (optional)</param>
        /// <returns>ApiResponse of DoBillInquiryModelResponse</returns>
        public ApiResponse< DoBillInquiryModelResponse > V1PaymentsBillsRequestsByTransIDGetWithHttpInfo (string transID, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bCountry = null, string bCurrency = null, double? bAmount = null, string bIssuerCode = null, string bAccNum = null)
        {
            // verify the required parameter 'transID' is set
            if (transID == null)
                throw new ApiException(400, "Missing required parameter 'transID' when calling BillsApi->V1PaymentsBillsRequestsByTransIDGet");

            var localVarPath = "/v1/payments/bills/requests/{transID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transID != null) localVarPathParams.Add("transID", Configuration.ApiClient.ParameterToString(transID)); // path parameter
            if (sIdType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sIdType", sIdType)); // query parameter
            if (sIdNum != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sIdNum", sIdNum)); // query parameter
            if (sFirstName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sFirstName", sFirstName)); // query parameter
            if (sLastName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sLastName", sLastName)); // query parameter
            if (bCountry != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bCountry", bCountry)); // query parameter
            if (bCurrency != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bCurrency", bCurrency)); // query parameter
            if (bAmount != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bAmount", bAmount)); // query parameter
            if (bIssuerCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bIssuerCode", bIssuerCode)); // query parameter
            if (bAccNum != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bAccNum", bAccNum)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsBillsRequestsByTransIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoBillInquiryModelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoBillInquiryModelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoBillInquiryModelResponse)));
        }

        /// <summary>
        /// Retrieve information of a bill account. Sample request:                    GET /v1/payments/bills?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bCountry&#x3D;{bCountry}&amp;amp;bCurrency&#x3D;{bCurrency}&amp;amp;              bAmount&#x3D;{bAmount}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP</param>
        /// <param name="sIdType">Sender Identification Type (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name (optional)</param>
        /// <param name="sLastName">Sender’s last name (optional)</param>
        /// <param name="bCountry">Bill country code (optional)</param>
        /// <param name="bCurrency">Bill Currency Code (optional)</param>
        /// <param name="bAmount">Total amount to pay for the bill (optional)</param>
        /// <param name="bIssuerCode">Biller Issuer Code (optional)</param>
        /// <param name="bAccNum">Bill Account Number or any other unique account identifier as determined by biller (optional)</param>
        /// <returns>Task of DoBillInquiryModelResponse</returns>
        public async System.Threading.Tasks.Task<DoBillInquiryModelResponse> V1PaymentsBillsRequestsByTransIDGetAsync (string transID, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bCountry = null, string bCurrency = null, double? bAmount = null, string bIssuerCode = null, string bAccNum = null)
        {
             ApiResponse<DoBillInquiryModelResponse> localVarResponse = await V1PaymentsBillsRequestsByTransIDGetAsyncWithHttpInfo(transID, sIdType, sIdNum, sFirstName, sLastName, bCountry, bCurrency, bAmount, bIssuerCode, bAccNum);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve information of a bill account. Sample request:                    GET /v1/payments/bills?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bCountry&#x3D;{bCountry}&amp;amp;bCurrency&#x3D;{bCurrency}&amp;amp;              bAmount&#x3D;{bAmount}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP</param>
        /// <param name="sIdType">Sender Identification Type (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name (optional)</param>
        /// <param name="sLastName">Sender’s last name (optional)</param>
        /// <param name="bCountry">Bill country code (optional)</param>
        /// <param name="bCurrency">Bill Currency Code (optional)</param>
        /// <param name="bAmount">Total amount to pay for the bill (optional)</param>
        /// <param name="bIssuerCode">Biller Issuer Code (optional)</param>
        /// <param name="bAccNum">Bill Account Number or any other unique account identifier as determined by biller (optional)</param>
        /// <returns>Task of ApiResponse (DoBillInquiryModelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoBillInquiryModelResponse>> V1PaymentsBillsRequestsByTransIDGetAsyncWithHttpInfo (string transID, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bCountry = null, string bCurrency = null, double? bAmount = null, string bIssuerCode = null, string bAccNum = null)
        {
            // verify the required parameter 'transID' is set
            if (transID == null)
                throw new ApiException(400, "Missing required parameter 'transID' when calling BillsApi->V1PaymentsBillsRequestsByTransIDGet");

            var localVarPath = "/v1/payments/bills/requests/{transID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transID != null) localVarPathParams.Add("transID", Configuration.ApiClient.ParameterToString(transID)); // path parameter
            if (sIdType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sIdType", sIdType)); // query parameter
            if (sIdNum != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sIdNum", sIdNum)); // query parameter
            if (sFirstName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sFirstName", sFirstName)); // query parameter
            if (sLastName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sLastName", sLastName)); // query parameter
            if (bCountry != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bCountry", bCountry)); // query parameter
            if (bCurrency != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bCurrency", bCurrency)); // query parameter
            if (bAmount != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bAmount", bAmount)); // query parameter
            if (bIssuerCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bIssuerCode", bIssuerCode)); // query parameter
            if (bAccNum != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bAccNum", bAccNum)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsBillsRequestsByTransIDGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoBillInquiryModelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoBillInquiryModelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoBillInquiryModelResponse)));
        }

    }
}
