/* 
 * GloRemit - REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IValidationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Perform pre-check on the validity of a Beneficiary account number
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/validation?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bFirstName&#x3D;{bFirstName}&amp;amp;bLastName&#x3D;{bLastName}&amp;amp;              bCountry&#x3D;{bCountry}&amp;amp;bAccType&#x3D;{bAccType}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}&amp;amp;              trxValue&#x3D;{trxValue}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP (optional)</param>
        /// <param name="sIdType">Sender Identification Type. Please refer to Section 3 for full list (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name(max 50 characters) (optional)</param>
        /// <param name="sLastName">Sender’s last name (max 50 characters) (optional)</param>
        /// <param name="bFirstName">Beneficiary first name (optional)</param>
        /// <param name="bLastName">Beneficiary last name (optional)</param>
        /// <param name="bCountry">Beneficiary’s country code. Please refer to ISO 3166 Country Code. Country code will determine the default currency (optional)</param>
        /// <param name="bAccType">Beneficiary Account Type (optional)</param>
        /// <param name="bIssuerCode">Beneficiary Account Issuer Code, such as banks, e-wallet operator or mobile operators (optional)</param>
        /// <param name="bAccNum">Beneficiary Issuer Account Number or any other unique account identifier as determined by issuer (optional)</param>
        /// <param name="trxValue">Total Amount is sent according to Beneficiary currency. It can be specified with any amount (optional)</param>
        /// <returns>GetValidationModelResponse</returns>
        GetValidationModelResponse V1PaymentsValidationGet (string transID = null, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bFirstName = null, string bLastName = null, string bCountry = null, int? bAccType = null, string bIssuerCode = null, string bAccNum = null, double? trxValue = null);

        /// <summary>
        /// Perform pre-check on the validity of a Beneficiary account number
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/validation?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bFirstName&#x3D;{bFirstName}&amp;amp;bLastName&#x3D;{bLastName}&amp;amp;              bCountry&#x3D;{bCountry}&amp;amp;bAccType&#x3D;{bAccType}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}&amp;amp;              trxValue&#x3D;{trxValue}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP (optional)</param>
        /// <param name="sIdType">Sender Identification Type. Please refer to Section 3 for full list (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name(max 50 characters) (optional)</param>
        /// <param name="sLastName">Sender’s last name (max 50 characters) (optional)</param>
        /// <param name="bFirstName">Beneficiary first name (optional)</param>
        /// <param name="bLastName">Beneficiary last name (optional)</param>
        /// <param name="bCountry">Beneficiary’s country code. Please refer to ISO 3166 Country Code. Country code will determine the default currency (optional)</param>
        /// <param name="bAccType">Beneficiary Account Type (optional)</param>
        /// <param name="bIssuerCode">Beneficiary Account Issuer Code, such as banks, e-wallet operator or mobile operators (optional)</param>
        /// <param name="bAccNum">Beneficiary Issuer Account Number or any other unique account identifier as determined by issuer (optional)</param>
        /// <param name="trxValue">Total Amount is sent according to Beneficiary currency. It can be specified with any amount (optional)</param>
        /// <returns>ApiResponse of GetValidationModelResponse</returns>
        ApiResponse<GetValidationModelResponse> V1PaymentsValidationGetWithHttpInfo (string transID = null, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bFirstName = null, string bLastName = null, string bCountry = null, int? bAccType = null, string bIssuerCode = null, string bAccNum = null, double? trxValue = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Perform pre-check on the validity of a Beneficiary account number
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/validation?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bFirstName&#x3D;{bFirstName}&amp;amp;bLastName&#x3D;{bLastName}&amp;amp;              bCountry&#x3D;{bCountry}&amp;amp;bAccType&#x3D;{bAccType}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}&amp;amp;              trxValue&#x3D;{trxValue}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP (optional)</param>
        /// <param name="sIdType">Sender Identification Type. Please refer to Section 3 for full list (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name(max 50 characters) (optional)</param>
        /// <param name="sLastName">Sender’s last name (max 50 characters) (optional)</param>
        /// <param name="bFirstName">Beneficiary first name (optional)</param>
        /// <param name="bLastName">Beneficiary last name (optional)</param>
        /// <param name="bCountry">Beneficiary’s country code. Please refer to ISO 3166 Country Code. Country code will determine the default currency (optional)</param>
        /// <param name="bAccType">Beneficiary Account Type (optional)</param>
        /// <param name="bIssuerCode">Beneficiary Account Issuer Code, such as banks, e-wallet operator or mobile operators (optional)</param>
        /// <param name="bAccNum">Beneficiary Issuer Account Number or any other unique account identifier as determined by issuer (optional)</param>
        /// <param name="trxValue">Total Amount is sent according to Beneficiary currency. It can be specified with any amount (optional)</param>
        /// <returns>Task of GetValidationModelResponse</returns>
        System.Threading.Tasks.Task<GetValidationModelResponse> V1PaymentsValidationGetAsync (string transID = null, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bFirstName = null, string bLastName = null, string bCountry = null, int? bAccType = null, string bIssuerCode = null, string bAccNum = null, double? trxValue = null);

        /// <summary>
        /// Perform pre-check on the validity of a Beneficiary account number
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /v1/payments/validation?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bFirstName&#x3D;{bFirstName}&amp;amp;bLastName&#x3D;{bLastName}&amp;amp;              bCountry&#x3D;{bCountry}&amp;amp;bAccType&#x3D;{bAccType}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}&amp;amp;              trxValue&#x3D;{trxValue}
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP (optional)</param>
        /// <param name="sIdType">Sender Identification Type. Please refer to Section 3 for full list (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name(max 50 characters) (optional)</param>
        /// <param name="sLastName">Sender’s last name (max 50 characters) (optional)</param>
        /// <param name="bFirstName">Beneficiary first name (optional)</param>
        /// <param name="bLastName">Beneficiary last name (optional)</param>
        /// <param name="bCountry">Beneficiary’s country code. Please refer to ISO 3166 Country Code. Country code will determine the default currency (optional)</param>
        /// <param name="bAccType">Beneficiary Account Type (optional)</param>
        /// <param name="bIssuerCode">Beneficiary Account Issuer Code, such as banks, e-wallet operator or mobile operators (optional)</param>
        /// <param name="bAccNum">Beneficiary Issuer Account Number or any other unique account identifier as determined by issuer (optional)</param>
        /// <param name="trxValue">Total Amount is sent according to Beneficiary currency. It can be specified with any amount (optional)</param>
        /// <returns>Task of ApiResponse (GetValidationModelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetValidationModelResponse>> V1PaymentsValidationGetAsyncWithHttpInfo (string transID = null, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bFirstName = null, string bLastName = null, string bCountry = null, int? bAccType = null, string bIssuerCode = null, string bAccNum = null, double? trxValue = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ValidationApi : IValidationApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ValidationApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ValidationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Perform pre-check on the validity of a Beneficiary account number Sample request:                    GET /v1/payments/validation?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bFirstName&#x3D;{bFirstName}&amp;amp;bLastName&#x3D;{bLastName}&amp;amp;              bCountry&#x3D;{bCountry}&amp;amp;bAccType&#x3D;{bAccType}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}&amp;amp;              trxValue&#x3D;{trxValue}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP (optional)</param>
        /// <param name="sIdType">Sender Identification Type. Please refer to Section 3 for full list (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name(max 50 characters) (optional)</param>
        /// <param name="sLastName">Sender’s last name (max 50 characters) (optional)</param>
        /// <param name="bFirstName">Beneficiary first name (optional)</param>
        /// <param name="bLastName">Beneficiary last name (optional)</param>
        /// <param name="bCountry">Beneficiary’s country code. Please refer to ISO 3166 Country Code. Country code will determine the default currency (optional)</param>
        /// <param name="bAccType">Beneficiary Account Type (optional)</param>
        /// <param name="bIssuerCode">Beneficiary Account Issuer Code, such as banks, e-wallet operator or mobile operators (optional)</param>
        /// <param name="bAccNum">Beneficiary Issuer Account Number or any other unique account identifier as determined by issuer (optional)</param>
        /// <param name="trxValue">Total Amount is sent according to Beneficiary currency. It can be specified with any amount (optional)</param>
        /// <returns>GetValidationModelResponse</returns>
        public GetValidationModelResponse V1PaymentsValidationGet (string transID = null, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bFirstName = null, string bLastName = null, string bCountry = null, int? bAccType = null, string bIssuerCode = null, string bAccNum = null, double? trxValue = null)
        {
             ApiResponse<GetValidationModelResponse> localVarResponse = V1PaymentsValidationGetWithHttpInfo(transID, sIdType, sIdNum, sFirstName, sLastName, bFirstName, bLastName, bCountry, bAccType, bIssuerCode, bAccNum, trxValue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform pre-check on the validity of a Beneficiary account number Sample request:                    GET /v1/payments/validation?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bFirstName&#x3D;{bFirstName}&amp;amp;bLastName&#x3D;{bLastName}&amp;amp;              bCountry&#x3D;{bCountry}&amp;amp;bAccType&#x3D;{bAccType}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}&amp;amp;              trxValue&#x3D;{trxValue}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP (optional)</param>
        /// <param name="sIdType">Sender Identification Type. Please refer to Section 3 for full list (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name(max 50 characters) (optional)</param>
        /// <param name="sLastName">Sender’s last name (max 50 characters) (optional)</param>
        /// <param name="bFirstName">Beneficiary first name (optional)</param>
        /// <param name="bLastName">Beneficiary last name (optional)</param>
        /// <param name="bCountry">Beneficiary’s country code. Please refer to ISO 3166 Country Code. Country code will determine the default currency (optional)</param>
        /// <param name="bAccType">Beneficiary Account Type (optional)</param>
        /// <param name="bIssuerCode">Beneficiary Account Issuer Code, such as banks, e-wallet operator or mobile operators (optional)</param>
        /// <param name="bAccNum">Beneficiary Issuer Account Number or any other unique account identifier as determined by issuer (optional)</param>
        /// <param name="trxValue">Total Amount is sent according to Beneficiary currency. It can be specified with any amount (optional)</param>
        /// <returns>ApiResponse of GetValidationModelResponse</returns>
        public ApiResponse< GetValidationModelResponse > V1PaymentsValidationGetWithHttpInfo (string transID = null, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bFirstName = null, string bLastName = null, string bCountry = null, int? bAccType = null, string bIssuerCode = null, string bAccNum = null, double? trxValue = null)
        {

            var localVarPath = "/v1/payments/validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transID != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "transID", transID)); // query parameter
            if (sIdType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sIdType", sIdType)); // query parameter
            if (sIdNum != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sIdNum", sIdNum)); // query parameter
            if (sFirstName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sFirstName", sFirstName)); // query parameter
            if (sLastName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sLastName", sLastName)); // query parameter
            if (bFirstName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bFirstName", bFirstName)); // query parameter
            if (bLastName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bLastName", bLastName)); // query parameter
            if (bCountry != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bCountry", bCountry)); // query parameter
            if (bAccType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bAccType", bAccType)); // query parameter
            if (bIssuerCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bIssuerCode", bIssuerCode)); // query parameter
            if (bAccNum != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bAccNum", bAccNum)); // query parameter
            if (trxValue != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "trxValue", trxValue)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsValidationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetValidationModelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetValidationModelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetValidationModelResponse)));
        }

        /// <summary>
        /// Perform pre-check on the validity of a Beneficiary account number Sample request:                    GET /v1/payments/validation?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bFirstName&#x3D;{bFirstName}&amp;amp;bLastName&#x3D;{bLastName}&amp;amp;              bCountry&#x3D;{bCountry}&amp;amp;bAccType&#x3D;{bAccType}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}&amp;amp;              trxValue&#x3D;{trxValue}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP (optional)</param>
        /// <param name="sIdType">Sender Identification Type. Please refer to Section 3 for full list (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name(max 50 characters) (optional)</param>
        /// <param name="sLastName">Sender’s last name (max 50 characters) (optional)</param>
        /// <param name="bFirstName">Beneficiary first name (optional)</param>
        /// <param name="bLastName">Beneficiary last name (optional)</param>
        /// <param name="bCountry">Beneficiary’s country code. Please refer to ISO 3166 Country Code. Country code will determine the default currency (optional)</param>
        /// <param name="bAccType">Beneficiary Account Type (optional)</param>
        /// <param name="bIssuerCode">Beneficiary Account Issuer Code, such as banks, e-wallet operator or mobile operators (optional)</param>
        /// <param name="bAccNum">Beneficiary Issuer Account Number or any other unique account identifier as determined by issuer (optional)</param>
        /// <param name="trxValue">Total Amount is sent according to Beneficiary currency. It can be specified with any amount (optional)</param>
        /// <returns>Task of GetValidationModelResponse</returns>
        public async System.Threading.Tasks.Task<GetValidationModelResponse> V1PaymentsValidationGetAsync (string transID = null, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bFirstName = null, string bLastName = null, string bCountry = null, int? bAccType = null, string bIssuerCode = null, string bAccNum = null, double? trxValue = null)
        {
             ApiResponse<GetValidationModelResponse> localVarResponse = await V1PaymentsValidationGetAsyncWithHttpInfo(transID, sIdType, sIdNum, sFirstName, sLastName, bFirstName, bLastName, bCountry, bAccType, bIssuerCode, bAccNum, trxValue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform pre-check on the validity of a Beneficiary account number Sample request:                    GET /v1/payments/validation?transID&#x3D;{transID}&amp;amp;sIdType&#x3D;{sIdType}&amp;amp;sIdNum&#x3D;{sIdNum}&amp;amp;              sFirstName&#x3D;{sFirstName}&amp;amp;sLastName&#x3D;{sLastName}&amp;amp;bFirstName&#x3D;{bFirstName}&amp;amp;bLastName&#x3D;{bLastName}&amp;amp;              bCountry&#x3D;{bCountry}&amp;amp;bAccType&#x3D;{bAccType}&amp;amp;bIssuerCode&#x3D;{bIssuerCode}&amp;amp;bAccNum&#x3D;{bAccNum}&amp;amp;              trxValue&#x3D;{trxValue}
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transID">6 digits or more unique transaction ID from RSP (optional)</param>
        /// <param name="sIdType">Sender Identification Type. Please refer to Section 3 for full list (optional)</param>
        /// <param name="sIdNum">Sender Identification Number (optional)</param>
        /// <param name="sFirstName">Sender’s first name(max 50 characters) (optional)</param>
        /// <param name="sLastName">Sender’s last name (max 50 characters) (optional)</param>
        /// <param name="bFirstName">Beneficiary first name (optional)</param>
        /// <param name="bLastName">Beneficiary last name (optional)</param>
        /// <param name="bCountry">Beneficiary’s country code. Please refer to ISO 3166 Country Code. Country code will determine the default currency (optional)</param>
        /// <param name="bAccType">Beneficiary Account Type (optional)</param>
        /// <param name="bIssuerCode">Beneficiary Account Issuer Code, such as banks, e-wallet operator or mobile operators (optional)</param>
        /// <param name="bAccNum">Beneficiary Issuer Account Number or any other unique account identifier as determined by issuer (optional)</param>
        /// <param name="trxValue">Total Amount is sent according to Beneficiary currency. It can be specified with any amount (optional)</param>
        /// <returns>Task of ApiResponse (GetValidationModelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetValidationModelResponse>> V1PaymentsValidationGetAsyncWithHttpInfo (string transID = null, int? sIdType = null, string sIdNum = null, string sFirstName = null, string sLastName = null, string bFirstName = null, string bLastName = null, string bCountry = null, int? bAccType = null, string bIssuerCode = null, string bAccNum = null, double? trxValue = null)
        {

            var localVarPath = "/v1/payments/validation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transID != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "transID", transID)); // query parameter
            if (sIdType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sIdType", sIdType)); // query parameter
            if (sIdNum != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sIdNum", sIdNum)); // query parameter
            if (sFirstName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sFirstName", sFirstName)); // query parameter
            if (sLastName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sLastName", sLastName)); // query parameter
            if (bFirstName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bFirstName", bFirstName)); // query parameter
            if (bLastName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bLastName", bLastName)); // query parameter
            if (bCountry != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bCountry", bCountry)); // query parameter
            if (bAccType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bAccType", bAccType)); // query parameter
            if (bIssuerCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bIssuerCode", bIssuerCode)); // query parameter
            if (bAccNum != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "bAccNum", bAccNum)); // query parameter
            if (trxValue != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "trxValue", trxValue)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PaymentsValidationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetValidationModelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetValidationModelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetValidationModelResponse)));
        }

    }
}
