/* 
 * GloRemit - REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetTrxStatusModel
    /// </summary>
    [DataContract]
    public partial class GetTrxStatusModel :  IEquatable<GetTrxStatusModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTrxStatusModel" /> class.
        /// </summary>
        /// <param name="TrxStatus">TrxStatus.</param>
        /// <param name="GTN">GTN.</param>
        /// <param name="TransID">TransID.</param>
        /// <param name="Description">Description.</param>
        /// <param name="PayoutID">PayoutID.</param>
        /// <param name="PayoutPIN">PayoutPIN.</param>
        /// <param name="PayoutStatus">PayoutStatus.</param>
        /// <param name="PayoutStatusUpdateDate">PayoutStatusUpdateDate.</param>
        /// <param name="StatusType">StatusType.</param>
        /// <param name="BAccType">BAccType.</param>
        public GetTrxStatusModel(string TrxStatus = default(string), string GTN = default(string), string TransID = default(string), string Description = default(string), string PayoutID = default(string), string PayoutPIN = default(string), string PayoutStatus = default(string), DateTime? PayoutStatusUpdateDate = default(DateTime?), string StatusType = default(string), int? BAccType = default(int?))
        {
            this.TrxStatus = TrxStatus;
            this.GTN = GTN;
            this.TransID = TransID;
            this.Description = Description;
            this.PayoutID = PayoutID;
            this.PayoutPIN = PayoutPIN;
            this.PayoutStatus = PayoutStatus;
            this.PayoutStatusUpdateDate = PayoutStatusUpdateDate;
            this.StatusType = StatusType;
            this.BAccType = BAccType;
        }
        
        /// <summary>
        /// Gets or Sets TrxStatus
        /// </summary>
        [DataMember(Name="TrxStatus", EmitDefaultValue=false)]
        public string TrxStatus { get; set; }

        /// <summary>
        /// Gets or Sets GTN
        /// </summary>
        [DataMember(Name="GTN", EmitDefaultValue=false)]
        public string GTN { get; set; }

        /// <summary>
        /// Gets or Sets TransID
        /// </summary>
        [DataMember(Name="transID", EmitDefaultValue=false)]
        public string TransID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PayoutID
        /// </summary>
        [DataMember(Name="PayoutID", EmitDefaultValue=false)]
        public string PayoutID { get; set; }

        /// <summary>
        /// Gets or Sets PayoutPIN
        /// </summary>
        [DataMember(Name="PayoutPIN", EmitDefaultValue=false)]
        public string PayoutPIN { get; set; }

        /// <summary>
        /// Gets or Sets PayoutStatus
        /// </summary>
        [DataMember(Name="PayoutStatus", EmitDefaultValue=false)]
        public string PayoutStatus { get; set; }

        /// <summary>
        /// Gets or Sets PayoutStatusUpdateDate
        /// </summary>
        [DataMember(Name="PayoutStatusUpdateDate", EmitDefaultValue=false)]
        public DateTime? PayoutStatusUpdateDate { get; set; }

        /// <summary>
        /// Gets or Sets StatusType
        /// </summary>
        [DataMember(Name="Status_Type", EmitDefaultValue=false)]
        public string StatusType { get; set; }

        /// <summary>
        /// Gets or Sets BAccType
        /// </summary>
        [DataMember(Name="BAccType", EmitDefaultValue=false)]
        public int? BAccType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetTrxStatusModel {\n");
            sb.Append("  TrxStatus: ").Append(TrxStatus).Append("\n");
            sb.Append("  GTN: ").Append(GTN).Append("\n");
            sb.Append("  TransID: ").Append(TransID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PayoutID: ").Append(PayoutID).Append("\n");
            sb.Append("  PayoutPIN: ").Append(PayoutPIN).Append("\n");
            sb.Append("  PayoutStatus: ").Append(PayoutStatus).Append("\n");
            sb.Append("  PayoutStatusUpdateDate: ").Append(PayoutStatusUpdateDate).Append("\n");
            sb.Append("  StatusType: ").Append(StatusType).Append("\n");
            sb.Append("  BAccType: ").Append(BAccType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetTrxStatusModel);
        }

        /// <summary>
        /// Returns true if GetTrxStatusModel instances are equal
        /// </summary>
        /// <param name="input">Instance of GetTrxStatusModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTrxStatusModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TrxStatus == input.TrxStatus ||
                    (this.TrxStatus != null &&
                    this.TrxStatus.Equals(input.TrxStatus))
                ) && 
                (
                    this.GTN == input.GTN ||
                    (this.GTN != null &&
                    this.GTN.Equals(input.GTN))
                ) && 
                (
                    this.TransID == input.TransID ||
                    (this.TransID != null &&
                    this.TransID.Equals(input.TransID))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.PayoutID == input.PayoutID ||
                    (this.PayoutID != null &&
                    this.PayoutID.Equals(input.PayoutID))
                ) && 
                (
                    this.PayoutPIN == input.PayoutPIN ||
                    (this.PayoutPIN != null &&
                    this.PayoutPIN.Equals(input.PayoutPIN))
                ) && 
                (
                    this.PayoutStatus == input.PayoutStatus ||
                    (this.PayoutStatus != null &&
                    this.PayoutStatus.Equals(input.PayoutStatus))
                ) && 
                (
                    this.PayoutStatusUpdateDate == input.PayoutStatusUpdateDate ||
                    (this.PayoutStatusUpdateDate != null &&
                    this.PayoutStatusUpdateDate.Equals(input.PayoutStatusUpdateDate))
                ) && 
                (
                    this.StatusType == input.StatusType ||
                    (this.StatusType != null &&
                    this.StatusType.Equals(input.StatusType))
                ) && 
                (
                    this.BAccType == input.BAccType ||
                    (this.BAccType != null &&
                    this.BAccType.Equals(input.BAccType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TrxStatus != null)
                    hashCode = hashCode * 59 + this.TrxStatus.GetHashCode();
                if (this.GTN != null)
                    hashCode = hashCode * 59 + this.GTN.GetHashCode();
                if (this.TransID != null)
                    hashCode = hashCode * 59 + this.TransID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.PayoutID != null)
                    hashCode = hashCode * 59 + this.PayoutID.GetHashCode();
                if (this.PayoutPIN != null)
                    hashCode = hashCode * 59 + this.PayoutPIN.GetHashCode();
                if (this.PayoutStatus != null)
                    hashCode = hashCode * 59 + this.PayoutStatus.GetHashCode();
                if (this.PayoutStatusUpdateDate != null)
                    hashCode = hashCode * 59 + this.PayoutStatusUpdateDate.GetHashCode();
                if (this.StatusType != null)
                    hashCode = hashCode * 59 + this.StatusType.GetHashCode();
                if (this.BAccType != null)
                    hashCode = hashCode * 59 + this.BAccType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
