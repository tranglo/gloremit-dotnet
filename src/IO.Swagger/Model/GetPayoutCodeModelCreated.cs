/* 
 * GloRemit - REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetPayoutCodeModelCreated
    /// </summary>
    [DataContract]
    public partial class GetPayoutCodeModelCreated :  IEquatable<GetPayoutCodeModelCreated>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPayoutCodeModelCreated" /> class.
        /// </summary>
        /// <param name="RequestId">RequestId.</param>
        /// <param name="CountryCode">CountryCode.</param>
        /// <param name="PreBookQty">PreBookQty.</param>
        public GetPayoutCodeModelCreated(string RequestId = default(string), string CountryCode = default(string), int? PreBookQty = default(int?))
        {
            this.RequestId = RequestId;
            this.CountryCode = CountryCode;
            this.PreBookQty = PreBookQty;
        }
        
        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets PreBookQty
        /// </summary>
        [DataMember(Name="preBookQty", EmitDefaultValue=false)]
        public int? PreBookQty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetPayoutCodeModelCreated {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  PreBookQty: ").Append(PreBookQty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetPayoutCodeModelCreated);
        }

        /// <summary>
        /// Returns true if GetPayoutCodeModelCreated instances are equal
        /// </summary>
        /// <param name="input">Instance of GetPayoutCodeModelCreated to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetPayoutCodeModelCreated input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.PreBookQty == input.PreBookQty ||
                    (this.PreBookQty != null &&
                    this.PreBookQty.Equals(input.PreBookQty))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.PreBookQty != null)
                    hashCode = hashCode * 59 + this.PreBookQty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
